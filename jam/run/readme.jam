<link rel="stylesheet" type="text/css" href="/jam/css/kim2.css">

<div style='color:#fff; background-color:#00727a; padding:10px; margin-bottom:10px'>
	<p>
		Notes
	</p>
</div>

{{@literal on}}

<h4>Global</h4>

{@strict off/0/false}	ON by default. Determines whether any top level word return aborts or continues the process
{@notify fail}			What you want to be notified about (if anything)
						FAIL by default. Can have multiple, eg 'notify fail ok someothervalue'
						or a command can override with 'notify=off' or 'notify=fail' or 'notify=ok,fail'
						options are OK, FAIL, off/0/false
						Note that setting @notify ok will issue an ok, as the set itself will be true

<h4>List</h4>

{@new list mylist dir /jam/template}
{@each mylist}
	{mylist}
{@end}

<hr>

<h4>Database</h4>

{@database stock}
{@list databases}
{@list tables}
{@describe stock_area}

<hr>

{@new database business}
{@new table product
	code        string      unique required
	name  		string      required
	notes 		text
	onhand      number
	costprice	number.4
	sellprice	number.2
	created		datetime
	order_date	date
	order_time	time
	...
}
{@new index product nameindex
	name	(asc)
	code 	(desc)
	...
}

{@clear item product}
{@new item product}
{@amend item product}
{@update item product}		// either new or amend
{@remove item product}

{@remove index product nameindex
{@remove table product}
{@remove database business

<hr>

{@each stock_customer}
{@each stock_customer_transaction filter date > '2015-04-20', date < '2015-04-23'}
{@each stock_area filter id > 14, id < 17}
{@each stock_customer filter stock_area_id = id, order by name}
{@each stock_customer filter stock_area_id = id, order by name DESC}
{@each stock_customer_transaction filter stock_user_id = stock_user.id}
{@each stock_customer_transaction filter date < mem.duedate, type = 'inv', balance > 0, order by date}
{@each stock_product_has_location filter stock_location_id = filter.location, onhand < min_level}
{@each ticket_temp_delegate_report filter name litke '%{{keyaction}}%', order by name}
{@eachsql stock_customer select * from stock_customer}		// 1st arg is table prefix (or var prefix) to prepend to table fields, followed by a literal sql command}
{@eachsql stock_customer somequery}


{@skip stock_product_has_location.stock_location_id = null}
{@skip stock_product_has_location.onhand < stock_product_has_location.min_level}

{@end}

{@get stock_markup_group filter id = stock_customer.stock_markup_group_id}
{@get stock_markup_group filter id != stock_customer.stock_markup_group_id}
{@get stock_markup_group filter id > stock_customer.stock_markup_group_id}
{@get stock_markup_group filter id >= stock_customer.stock_markup_group_id}
{@get stock_customer filter id = stock_customer_transaction.stock_customer_id, name > filter.customername, skip if null}
{@get stock_customer_transaction filter id = stock_customer_transaction_item.id, stock_user_id = stock_user.id, type = 'inv', skip if null}

{@sql delete from customer where _id = 1}
{@sql select name, telephone from customer where balance > {input.bal} }

{@action addnewcustomer}
	...
{@end}

<hr>

<h4>Inbuilt</h4>

{@count id}
{@count stock_customer_transaction.id as invoicetotal}

{@sum id}
{@sum stock_customer_transaction.total_amount as my.salestotal}

{@runaction actionname}		// calls an action which (unlike html) has access to all variables

{stock_product.cost}
{stock_customer_transaction_item.price - stock_product.cost}
{(stock_customer_transaction_item.price - stock_product.cost) * stock_customer_transaction_item.qty}
{mem.l1_group_name = stock_group.name}
{mem.l1_group_name}
{mem.qty-required = stock_product_has_location.onhand - stock_product_has_location.min_level}
{mem.c1 = stock_product_has_location.onhand - stock_product_has_location.min_level}

<hr>

<h4>HTML</h4>

<h5>Layout</h5>

{@html container start [center] [css='blah']}
{@html container end}

{@html gridrow start [cols=4] [css='blah'] }		optional cols specifies number of equal size columns
{@html gridrow end}
{@html gridcol start [width=3-5]} [css='blah'] }	..or each col can specify its size
{@html gridcol end}

<h5>Inputs</h5>

<h6> New </h6>

onChange and onKeyUp is bound to all input types - user defines an appropriate onXxxx_table_field(this) function
@@TODO allow others to be bound by user, something like event=onfocus or whatever. Function name per usual naming convention
NB onKeyUp is often used as a search filter in conjunction with an @action

{@html dropdown/filter field=product.supplier_id pickfield=supplier.name size=medium label='Line Supplier' tip='hover on me'}
{@html dropdown/filter field=product.supplier_id pickfield=supplier.name size=medium group=mygroup}
{@html dropdown/filter field=product.supplier_id pickfield=supplier.name size=medium}
{@html text/date/password field=product.supplier_id size=medium label='Address' placeholder='address line 1'}
{@html text/date/password field=product.supplier_id size=medium hidden default=1}
{@html textarea field=stock_supplier.notes size=60x5 label=Notes}

Optional for any - label, group, disabled, tip, default

{@html button Save primary small
	alert('ok')     			// or any js
	doMyFunction(obj)			// 'obj' is the buttons 'this' object
	newObj = getSibling(obj)	// Get a field in the same row as the button as the ROW_ class is set for us
	runJam
	runJam supplierMaint.tpl
	runAction updateSupplier, supplierForm, outputResult, alert('back from ajax')
	runAction updateSupplier 'supplierForm _id' outputResult runJam supplierMaint.tpl 
	runAction updateSupplier, supplierForm _id, outputResult, runJam('supplierMaint.tpl')
}

<h6> Old (obselete - here just for info) </h6>

{@html input hidden stock_supplier._id}
{@html input text stock_supplier.payment_terms mini "Payment terms" days}
{@html input date stock_supplier.date mini "Date"}
{@html input filter stock_transaction.supplier_id stock_supplier.name mini "Supplier Name"}
{@html input keyaction jam:action, inputElement, outputResult, mini}	// use null for empty values
{@html input disabled stock_supplier.payment_terms mini "Payment terms" days}}	// same as input just no editing
{@html inp <anytype means inline input>}
{@html textarea stock_supplier.notes 60x5 Notes}
{@html checkbox field=young_person.exclusion_risk label='Exclusion risk' tip='At risk of Exclusion?'}
{@html radio field=befriender.gender label='Gender' options=0:Male,1:Female}

<h5>Tabs</h5>

{@html tabs
	label=Customers 	action=/run/customerMaint
	label='Tab text'	action=/path/to/jam
}

<h5> html control </h5>

{@html breakpoint body end}  // so far the only breakpoint, triggered by footer.html to do stuff at end

{@html js whateverisheregetsrunafterreturnfromaction}	// this is the only way actions can create js

<hr>

<h5>Javascript utility functions (see util.js) </h5>

runJam fileName
	runJam('name.jam')
	runJam
runAction [jamName:]actionName, array [name(s)/id(s)/class], [resultObjectName], [callback]
	runAction('save')
	runAction('jam2:save', ['form1,form2'], 'divThatGetsTheResult', backButton )

<hr>

<h4>Utility</h4>

<h5>System Variables</h5>

sys.control.xxxxx	// mainly for sysjam, all args processed line by line are converted to vars eg 'group=mygroup size=small'
sys.sequence		// The unique sequence number for each iteration of an @each @end loop. Useful for getSibling() js calls from direct html <button>s etc
sys.today			// Date
sys.now 			// Time
sys.cookie.xxxxx 	// Cookies ('bf_user' etc)
sys.hash			// 26 character random string   <------ still todo
sys.randomnumber	// 8 digit rand



<hr>

<h4>Misc</h4>

{@email admin@dglink.co.uk concertgoer@horrormail.com "Your tickets" Thank you order.name for buying numberof tickets}
{@email from to subject action:runActionNameForContent}

{@type /path/file}
{@sysjam jamscript-in-sys-jam-area optional-action}

{@include /path/file}
{@include once /path/file}
{@include standalone /path/file}	// only include if this file itself is not included

{@daycount fromdate todate}			// eg 14
{@adddays fromdate days [mydate]}			// eg 2016-12-20 20 [var-to-create]
{@datedmy date [myvar]}	convert yyyy-mm-dd to dd-mm-yyyy format, and either store in myvar or simply emit
{@dateoverlap start1=date end1=date start2=date end2=date newfield=myvar}	// is there any overlap between the ranges? 0 or 1 stored in newfield

{@replacevalue field=befriender.gender value=0:male,1:female}
{@wordsplit field=global.postcode segment=1 newfield=myNewField}	// IF newfield is specified it will be created/updated otherwise simply emitted

{@randomnumber [newfield=myvar]	// emit or store a random number in newfield
{@stop}		gracefully stop processing jamfile at this point
{@skip [condition]}		// where condition is something like myVar=1, myVar != 1

<hr>



<hr>


{{@literal off}}


<input type="text" name="{filter.customername}" value="">

<textarea name="{filter.textarea}" rows="4" cols="50"></textarea>

<input type="password" name="{filter.password}">

<input type="submit" name="{filter.yesbutton}" value="Yes">

<input type="date" name="{filter.duedate}">

<input type="color" name="{filter.color}" value="#ff0000">

{@each stock_location}
	<input type="radio"    name="{filter.location}" value="{stock_location.id}">{stock_location.name}
	<input type="checkbox" name="{filter.location}" value="{stock_location.id}">{stock_location.name}
{@end}

<select name="{filter.select}">
	{@each stock_area}
		<option value="{id}">{name}</option>
	{@end}
</select>

<hr>

{@new form myform
	action 			?template=test_filter.update:newamendremove
	{{@button}}

}

<hr>

<h3>Internal notes</h3>

Running from commandline
	- /path/to/jam documentroot path/to/jamfile
	- ../cgi/jam ~/dev/src/www/angular/stock befriender


@actions. All variables created as the result of actions are sent as oob to the browser.

We should maybe have a setting whereby an ajax call can send all the browser vars to the server on an @action call. This is like having 'state'
